1) What is computation?
  Is the act of producing some output by introducing some input in the program.

2) What do we mean by inputs and outputs to a computation ? Give examples.
  Normally the inputs come from the user side, such as a keyboard entry or a click with the mouse. The output is what we are
going to answer to the user, it can be a prompt with a message or a service that we provide with a request for example.

3) What are the three requirements a programmer should keep in mind when expressing computations?
  Correctly, simply and efficiently.

4) What does an expression do ?
  An expression computes a value from a number of operands.

5) What is the difference between statement and an expression, as described in this chapter?
  The statement is an instruction written in a high-level language that commands the computer to perform a specified action.
A statement may have internal components, like expressions.

6) What is an lvalue? List the operators that require an lvalue. Why do these operators, and not the others, require lvalue?
  lvalue is a value that will be changed by the operator he is linked to. Like the expressions: v++ and v--.

7) What is a constant expression ?
  It is an expression that deal with constants. In a way that the assignment of a value to the variable related with this constant
will only be made a one time. So we cannot modify it's value after that.

8) What is a literal ?
    Are fixed values in the program.
Example:
double pi = 3.14

    The number '3.14' is a literal. And 'pi' is a constant.

9) What is a symbolic constant and why do we use then?
  Is a named object which you can't give a new value after it has been initialized.

10) What is a magic constant ?
  Are all non-obvious literals in code. The term magic number or magic constant also refers to the programming practice of using
  numbers directly in source code. This has been referred to as breaking one of the oldest rules of programming, dating back to the COBOL,
  FORTRAN and PL/1 manuals of the 1960s.[8] The use of unnamed magic numbers in code obscures the developers' intent in choosing
  that number,[9] increases opportunities for subtle errors (e.g. is every digit correct in 3.14159265358979323846 and is this
  equal to 3.14159?) and makes it more difficult for the program to be adapted and extended in the future.[10] Replacing all
  significant magic numbers with named constants makes programs easier to read, understand and maintain.

11) What are some operators that we can use for integers and floating points values ?
  a+b
  a-b
  out << b
  in >> b
  a < b
  a <= b
  a > b
  a >= b
  a == b
  a != b
  a && b
  a || b
  lval = a
  lval *= a

12) What operators can be used on integers but not on floating points numbers ?
  The modulo operator (%).

13) What operators can be used for strings ?
  =, +, +=, s >> x, s << x, ==, !=, >, >=, <, <=.

14) When would a programmer prefer a switch statement to an if statement ?
  When we want to make a clearer code, avoiding nested if's. And also when dealing with a larger sets of constants a switch
  statement generates a more efficient code than a if statement.

15) What are some common problems with switch statements ?
  The case labels must be all constants (int,char,enum) and distinct, all case labels must have a break statement at the end.

16) What are the functions of each part of the header line in a for-loop, and in what sequence are they executed ?

  for (int i = 0; i < 10; i++) stands for ...
    {commands}.
  "Execute the body with i starting at 0 incrementing i after each execution of the body by one, until reach 100."

17) When should a for-loop be used and when should the while-loop be used ?
  Using a for-statement yields more easily understood and more maintainable code. Because every loop has a initializer,
  a condition and an increment operation, and these are placed in every for-statement. The while-statement should be used
  when this case don't happen, like a not ending loop.

18) How do you print the numeric value of a char ?
  cout << (int)c;

19) Describe what the line char foo (int x) means in a function definition ?
  The function named as 'foo' receive a integer variable 'x' as argument, do some stuff and return a character variable.

20) When should you define a separate function for part of a program ? List reasons.
  When you have to do some a common command several times, when you want to make you code more clearer for a reader to
understand, in way that you can show what you are actually doing in that bunch of code.
  And most important, makes fixes in the code a lot more easier !

21) What can you do to a int that you cannot do to a string ?
  You cannot subtract, multiply or divide a string with the operators '-', '*' and '/' respectively. The modulo operator is
  not available for strings also.

22) What can you do to a string that you cannot do to a int ?
  Concatenate.

23) What is the index of the third element of a vector ?
  2.

24) How do you write a for-loop that prints every element of a vector ?
  1)
    for (int i = 0; i < v.size(); i++)
      cout << v[i] << endl;
  2)
    for (int x : v)
      cout << x << endl;      // [!] Only works after c++98.

25) What does vector<char> alphabet(26); do ?
  It defines a vector of size 26 with default type initializer. (char = '')

26) Describe what push_back() does to a vector ?
  This procedure grow the vector by appending to the last valid index of vector the value passed as argument to the function.

27) What do vector's member functions begin(), end() and size() do ?
  begin() -> return a iterator type to the beginning of the vector.
  end() -> return a iterator type to the end of the vector.
  size() -> return the size of the vector.

28) What makes vector so popular/useful ?
  Because they are commonly use in a lot of programs, such as when you have to store a lot of elements.

29) How do you sort the elements of a vector ?
  First include the <algorithm> library and then write:
    sort(v.begin(),v.end());
